Python script:

import RPi.GPIO as GPIO
# GPIO Pins konfigurierren - ein input and ein output
GPIO.setup(11, GPIO.IN)     # = GPIO 17
GPIO.setup(12, GPIO.OUT)  # = GPIO 18
# input von pin 11 einlesen
input_value = GPIO.input(11)
# output auf Pin 12 ausgegeben
GPIO.output(12, True)

Die Nummerierung der Pins 11 und 12 in diesem Beispiel bezieht sich auf
den physikalischen Pin der Stiftleiste die mit GPIO 17 und GPIO 18 in der Abbildung
beschriftet sind.

Shell script:
#!/bin/sh
# GPIO numbers should be from this list
# 0, 1, 4, 7, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23, 24, 25
# Note that the GPIO numbers that you program here refer to the pins
# of the BCM2835 and *not* the numbers on the pin header.
# So, if you want to activate GPIO7 on the header you should be
# using GPIO4 in this script. Likewise if you want to activate GPIO0
# on the header you should be using GPIO17 here.
# set up GPIO 4 and set to output
echo "4" > /sys/class/gpio/export
echo "out" > /sys/class/gpio/gpio4/direction
# set up GPIO 7 and set to input
echo "7" > /sys/class/gpio/export
echo "in" > /sys/class/gpio/gpio7/direction
# write output
echo "1" > /sys/class/gpio/gpio4/value
# read from input
cat /sys/class/gpio/gpio7/value
# clean up
echo "4" > /sys/class/gpio/unexport
echo "7" > /sys/class/gpio

Pin
1 - 3.3 V
2 - 5V
3 - GPIO 00 = Rev1 und  - GPIO 02 = Rev2
4 ---------
5 - GPIO 01 = Rev1 und  - GPIO 03 = Rev2
6 - GND
7 - GPIO 04
8 - GPIO 14
9 ---------
10 - GPIO 15
11 - GPIO 17
12 - GPIO 18
13 - GPIO 21 = Rev1 und  - GPIO 27 = Rev2
14 ----------
15 - GPIO 22
16 - GPIO 23
17 ----------
18 - GPIO 24
19 - GPIO 10
20 ----------
21 - GPIO 09
22 - GPIO 25
23 - GPIO 11
24 - GPIO 08
25 ------------
26 - GPIO 07

