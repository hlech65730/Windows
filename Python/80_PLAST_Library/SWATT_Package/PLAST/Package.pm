package Packages::PLAST;
use Packages;
use strict;

use FindBin qw($Bin);
# print "BIN is $Bin \n"; -->  BIN is d:/ts_mirr/a_swatt/v1.6/Test_Runner
use Log;
use Data::Dumper;

use File::Copy;
use File::Spec;

print "Package PLAST loaded\n";

# keep $config out here, so we can refer to it in other functions
my $config;

#my $dbg_type="iSystem";
my $LastCDotTestFileAbsName='';

my @used_plast_modules=();

# Init has to re-initialize everything that should be reset for each *.c.test file.
# If there is something you don't set in Init, it will retain its value across *.c.test files.
# There may be some cases where this is useful (e.g. statistics gathering).
sub Init {
    $config = shift;
    $config->test_type("PLAST");

	if ($LastCDotTestFileAbsName ne $config->abs_file_name())
	{
		$LastCDotTestFileAbsName = $config->abs_file_name();
		$config->add_include_dirs("$Bin/Packages/PLAST");
	}
	$config->add_link_lib_options("-Lc:/Python27/libs -lpython27");
	 
    Packages::add_hook($config, 'pre_autostub', \&pre_autostub);
    Packages::add_hook($config, 'pre_instrument', \&pre_instrument);
    Packages::add_hook($config, 'pre_compile', \&pre_compile);
    Packages::add_hook($config, 'post_execute', \&post_execute);

   # Packages::register_keyword($config, 'DBG_SET_TYPE', 1, \&_dbg_set_type);
   Packages::register_keyword($config, 'PLAST_USE_MODULE', 1, \&_plast_use_module);
   #TODO set modfy plast config file
    
	TestCase::add_package_setup("Z_SWATT_setup_PLAST();");
	#TestCase::add_package_init('printf("package init here\n");');
    #TestCase::add_package_cleanup('printf("package cleanup here\n");');

}
sub _plast_use_module {
	my $new_module = shift;
	push @used_plast_modules, $new_module;
	return '';
} 
sub CopyFilesFromFolder
{
	my $from_folder = shift;
	my $to_folder = shift; 
	my $type_match = shift; # e.g. *.h
	my @files = glob("$from_folder/$type_match");
	
	for my $file (@files) 
	{
		   my ($volume,$directories,$name) = File::Spec->splitpath( $file );
    	   if (not (-e $to_folder."/$name"))
    	   {
    	   		copy($file, $to_folder);    	   		
    	   }
	}
}

sub Generate_PLAST_used_modules_h 
{
    my  $FileName= shift;

   open(SLNH,">$FileName") or die ("\n\nCannot open $FileName for write \n\n");
   print SLNH "",
   "/* Note: this file is generated by the SWATT PLAST package */\n",
   "/* Manual modifications may lead to unintended behaviour */\n";

   print SLNH "\n",
   "#ifndef PLAST_USEDMODULES_H \n",
   "#define PLAST_USEDMODULES_H \n";
   my $plast_home = "";
 #  if(exists $ENV{'PLAST_WA_PATH'})
	if(exists $ENV{'PLAST_PATH'})
	{   
		#$plast_home =$ENV{'PLAST_WA_PATH'};
		$plast_home =$ENV{'PLAST_PATH'};
		#my 	@dirs   = File::Spec->splitdir($plast_home); 
		#pop @dirs;  
		#pop @dirs; 
		#pop @dirs; #go up three levels
		#$plast_home = File::Spec->catdir(@dirs);         # create new path
		#turn backslashes into forward slashes
		$plast_home =~ tr#\\#/#;
	}
	else
	{
		#TODO replace this with default folder location
		$plast_home="D:/PLAST_SANBOX/Software/Library";
	}

   print SLNH "\n",
   "#define PLAST_LOCATION \"".$plast_home."\"\n";

   foreach my $module (@used_plast_modules) { 
		my $uppercasemodule=uc $module;
		print SLNH "\n#define ENABLE_PLAST_".$uppercasemodule."\n";
   } 

  print SLNH "\n"."#endif \n\n";
  close(SLNH);

}


sub pre_autostub {
	Generate_PLAST_used_modules_h($Bin."/Packages/PLAST/PLAST_UsedModules.h");
	CopyFilesFromFolder($Bin."/Packages/PLAST",$config->temp_dir(),"*.h");
	CopyFilesFromFolder($Bin."/Packages/PLAST",$config->temp_dir(),"*.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_Common.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_PowerSource.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_Debugger.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_SignalGenerator.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_SMS.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_DBCParser.c");
	push(@{$config->{'use_files_to_compile'}}, $config->temp_dir()."/"."PLAST_Setup.c");
#Apparently use files to compile is not needed
	#PreAutoStubActionForDebuggerType();
	$config->add_include_dirs("C:/Python27/include");
}



sub pre_instrument {
    # print "pre_instrument hook called\n";
}

sub pre_compile {
    # print "pre_compile hook called\n";

    # print the config file name here to show that the $config can be remembered
    # print $config->config_file_name(), "\n";
}

sub post_execute {
    # print "post_execute hook called\n";
}

#sub Generate_SlowTimerNames_h
#{
    #my  $FileName= shift;
    #open(SLNH,">$FileName") or FTL_FatalError ("\n\nCannot open $FileName for write \n\n");
#    print SLNH "",
     #"/* Note: this file is generated by the SWATT FTL */\n",
     #"/* Manual modifications may lead to unintended behavior */\n";

#    print SLNH "\n",
     #"#ifndef SLOW_TIMER_NAMES_H \n",
     #"#define SLOW_TIMER_NAMES_H \n";
	 
    #print SLNH "\n"."#endif \n\n";
    #close(SLNH);
#}



1;